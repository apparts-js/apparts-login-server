#+TITLE: Login and Signup
#+DATE: [2019-02-06 Wed]
#+AUTHOR: Philipp Uhl

* Backend

** Usage

1. Install peer-dependencies for backend

   - "apparts-error": "git+ssh://git@ph-uhl.com:Apparts/apparts-error#semver:^1.0.0"
   - "apparts-model": "git+ssh://git@ph-uhl.com:Apparts/apparts-model#semver:^1.0.0"
   - "apparts-types": "git+ssh://git@ph-uhl.com:Apparts/apparts-types#semver:^1.0.0"
   - "apparts-node-app": "git+ssh://git@ph-uhl.com:Apparts/apparts-node-app#semver:^1.0.0"
   - "bcrypt-nodejs": "0.0.3"
   - "crypto": "^1.0.1"
   - "express": "^4.16.4"

2. Set user-model in your =app.js=
   #+BEGIN_SRC js
   const { prepauth } = require('apparts-types');
   const User = require('./model/user.js');
   prepauth.setUserModel(User);
   #+END_SRC

3. Start a Postgresql-server according to configuration

4. Setup DB as needed or run =npm run setupDB=

5. =npm run serve=

** Configuration

The configuration options for this component have to be stored
accessible by the =apparts-config=-module through the name =login=.
They are:
- ~pwHashRounds {int}~ :: Amount of hash-rounds for password
     storing, passend on to =bcrypt=
- ~tokenLength {int}~ :: Length of login-token
- ~nameLengthMin {int}~ :: The minimum length for the username
- ~pwLengthMin {int}~ :: The minimum length for the password

** Provided REST-API

*** POST =/v1/user/=

- Body Parameters
  - ~name {string}~ :: Username
  - ~email {email}~ :: Email
  - ~password {password}~ :: Password
- Returns
  + ~{ id: {id}, token: {token}}~
  + 400, ="name to short"=
  + 400, ="pw to short"=
  + 400, ="Username taken"=

_Example:_
#+BEGIN_SRC restclient
:uname = testname3
:email = testname3@gmail.com
:pw = a123456

POST http://127.0.0.1:3000/v1/user/
Content-Type: application/x-www-form-urlencoded
name=:uname&email=:email&password=:pw
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 21,
  "token": "sTrw72s8DtMbdHzSdT11sivW/0vjFkKy1FFpJkdzr2c="
}
// POST http://127.0.0.1:3000/v1/user/
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 64
// ETag: W/"40-jhUPKq+D+iLyBAe1Xe3oODIv654"
// Date: Tue, 12 Feb 2019 16:00:34 GMT
// Connection: keep-alive
// Request duration: 0.272916s
#+END_SRC

*** GET =/v1/user/:id=

- Path Parameters
  - ~int {id}~ :: Id of the user to be returned
- Headers
  - =Authorization= with =Basic= base64(username:token)
- Returns
  + ~{ id: {id}, name: {string} }~
  + 400, ="Authorization wrong"=
  + 401, ="Unauthorized"=
  + 404

_Example:_
#+BEGIN_SRC restclient
:my-auth := (base64-encode-string "testname3@gmail.com:0mK3qRBqyuHGcrxghZRXGbynLlx6LDxr5+TT0FJOJv0=" t)

GET http://127.0.0.1:3000/v1/user/20
Content-Type: application/x-www-form-urlencoded
Authorization: Basic :my-auth
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 20,
  "name": "testname3"
}
// GET http://127.0.0.1:3000/v1/user/20
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 28
// ETag: W/"1c-7vM82X4RsHmDNUOUE2XcYT5mRCM"
// Date: Tue, 12 Feb 2019 15:57:00 GMT
// Connection: keep-alive
// Request duration: 0.007437s
#+END_SRC

*** GET =/v1/user/:id/token=

- Path Parameters
  - ~int {id}~ :: Id of the user, can be anything, will always use
                  your id
- Headers
  - =Authorization= with =Basic= base64(username:password)
- Returns
  + ~{ id: {id}, token: {token} }~
  + 400, ="Authorization wrong"=
  + 401, ="Unauthorized"=
  + 404


_Example:_
#+BEGIN_SRC restclient
:my-auth := (base64-encode-string "testname3@gmail.com:a123456" t)

GET http://127.0.0.1:3000/v1/user/1/token
Content-Type: application/x-www-form-urlencoded
Authorization: Basic :my-auth
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 20,
  "token": "0mK3qRBqyuHGcrxghZRXGbynLlx6LDxr5+TT0FJOJv0="
}
// GET http://127.0.0.1:3000/v1/user/1/token
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 64
// ETag: W/"40-zxDI4x20J1VZXlBxXXI+Yyu6458"
// Date: Tue, 12 Feb 2019 15:55:47 GMT
// Connection: keep-alive
// Request duration: 0.268833s
#+END_SRC

*** DELETE =/v1/user/:id=

- Path Parameters
  - ~int {id}~ :: Id of the user to be deleted
- Headers
  - =Authorization= with =Basic= base64(username:password)
- Returns
  + ="ok"=
  + 400, ="Authorization wrong"=
  + 401, ="Unauthorized"=
  + 404, ="User not found"=

_Example:_
#+BEGIN_SRC restclient
:my-auth := (base64-encode-string "testname1@gmail.com:a123456" t)

DELETE http://127.0.0.1:3000/v1/user/17
Content-Type: application/x-www-form-urlencoded
Authorization: Basic :my-auth
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
"ok"
// DELETE http://127.0.0.1:3000/v1/user/17
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 4
// ETag: W/"4-Ut1MdMgT2zeQF5xPI2zq2so0Z6g"
// Date: Tue, 12 Feb 2019 15:59:24 GMT
// Connection: keep-alive
// Request duration: 0.259496s
#+END_SRC

*** PUT =/v1/user/:id=

- Path Parameters
  - ~int {id}~ :: Id of the user to be changed
- Body Parameters
  - ~name {string}~ :: Optional, new name of the user
  - ~email {email}~ :: Optional, new email of the user
  - ~newpassword {password}~ :: Optional, new password of the user
  - ~password {password}~ :: Optional, old password of the user,
       *required if not using a passwort-reset token*
- Headers
  - =Authorization= with =Basic= base64(username:token)
- Returns
  + ="ok"=
  + 400, ="nothing to update"=
  + 400, ="Email exists already"=
  + 400, ="Authorization wrong"=
  + 401, ="Unauthorized"=

_Example:_
#+BEGIN_SRC restclient
:my-auth := (base64-encode-string "test@web.de:FcvsslFITxgPyszUy80NDee+WOTE7xdn1zASyDwdx90=" t)

PUT http://127.0.0.1:3001/v1/user/20
Content-Type: application/x-www-form-urlencoded
Authorization: Basic :my-auth
name=dude&password=myPw1
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
"ok"
// PUT http://127.0.0.1:3001/v1/user/20
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 4
// ETag: W/"4-Ut1MdMgT2zeQF5xPI2zq2so0Z6g"
// Date: Wed, 13 Feb 2019 15:36:32 GMT
// Connection: keep-alive
// Request duration: 0.259056s
#+END_SRC

*** POST =/v1/user/:email/reset=

- Path Parameters
  - ~email {emial}~ :: Email of the user to be changed
- Returns
  + ="ok"=

_Example:_
#+BEGIN_SRC restclient
POST http://127.0.0.1:3000/v1/user/abc@web.de/reset
Content-Type: application/x-www-form-urlencoded
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
"ok"
// POST http://127.0.0.1:3001/v1/user/abc@web.de/reset
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 4
// ETag: W/"4-Ut1MdMgT2zeQF5xPI2zq2so0Z6g"
// Date: Wed, 13 Feb 2019 15:33:11 GMT
// Connection: keep-alive
// Request duration: 0.020691s
#+END_SRC

* Test




#+BEGIN_SRC restclient


POST http://127.0.0.1:3001/v1/user/
Content-Type: application/json; charset=utf-8
{"email":"testweb.de","password":"a12345","name":"Testuser"}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "error": "Fieldmissmatch",
  "field": "body",
  "message": {
    "email": "expected email"
  }
}
// POST http://127.0.0.1:3001/v1/user/
// HTTP/1.1 400 Bad Request
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 78
// ETag: W/"4e-q12YiSuG3vphm5d0GGpdl7X5fwI"
// Date: Tue, 12 Feb 2019 23:22:26 GMT
// Connection: keep-alive
// Request duration: 0.002617s
#+END_SRC

