#+TITLE: Login and Signup
#+DATE: [2019-02-06 Wed]
#+AUTHOR: Philipp Uhl

* Backend

** TODO Usage

1. Install peer-dependencies for backend

   - "@apparts/config": "^1.0.5",
   - "@apparts/error": "^1.0.3",
   - "@apparts/types": "^2.6.1",
   - "@apparts/db": "^2.0.0",
   - "@apparts/model": "^3.0.0"
   - "apparts-node-app": "git+ssh://git@ph-uhl.com:Apparts/apparts-node-app#semver:^1.0.0"
   - "bcrypt-nodejs": "0.0.3"
   - "crypto": "^1.0.1"
   - "express": "^4.16.4"

2. Set user-model in your =app.js=
   #+BEGIN_SRC js
   const { prepauth } = require('apparts-types');
   const User = require('./model/user.js');
   prepauth.setUserModel(User);
   #+END_SRC

3. Start a Postgresql-server according to configuration

4. Setup DB as needed or run =npm run setupDB=

5. =npm run serve=

** Configuration

In =db-config=
- ~bigIntAsNumber~ must be ~true~

In =types-config=
-   ~idType~ must be ~"int"~

The configuration options for this component have to be stored
accessible by the =apparts-config=-module through the name =login-config=.
They are:
- ~pwHashRounds {int}~ :: Amount of hash-rounds for password
     storing, passend on to =bcrypt=
- ~tokenLength {int}~ :: Length of login-token
- ~nameLengthMin {int}~ :: The minimum length for the username
- ~pwLengthMin {int}~ :: The minimum length for the password
- ~supportedLanguages {[string]}~ :: List of supported languages
- ~welcomeMail {object}~ :: The object should have keys ~title~ and
  ~body~. Within both, all occurrences of the string "##NAME##" will
  be replaced with the users name. In the body, all occurences of the
  string "##URL##" will be replaced with a URL for setting the
  password and thus confirming the email address.
- ~resetPWMail {object}~ :: The object should have keys ~title~ and
  ~body~. Within both, all occurrences of the string "##NAME##" will
  be replaced with the users name. In the body, all occurences of the
  string "##URL##" will be replaced with a URL for resetting the
  password.
- ~resetUrl {string}~ :: The URL, that will be send emails for setting
  and resetting passwords. Appended query parameters:
  - ~token {string}~ :: An auth token
  - ~?welcome {bool}~ :: Set to true, if this is not from a password
    reset mail, but from a welcome mail.
- ~extraTypes {?object}~ :: An optional object that contains type
  definitions as expected by the preperator of @apparts/types. Will be
  injected into the ~body~-type definitions of ~POST /v/1/user~ and
  can be used to validate extra parameters on user creation. These
  extra parameters will be passed to the ~setExtra~ function (see
  [[Overwriting the User-model]]).

*** Overwriting the User-model

The user model can be overwritten to provide extra functionality. For
more information on how to overwrite functions of the user model, see
the documentation of [[https://github.com/phuhl/apparts-model#usage][@apparts/model]]. All of these functions are only
called on the OneModel of the user, thus only the ~User~ has to be
extended, not the ~Users~ or ~NoUser~ classes. The functions,
explicitly intended for overwriting:

- ~getWelcomeMail() {object}~ :: Returns the content of a welcome
  email that is send after registration. The function returns an
  object of the form ~{ title: {string}, body: {string}}~. The
  function can access ~this.content~. It's content should contain a
  link with the reset token. Default implementation:
  #+BEGIN_SRC js
    getWelcomeMail() {
      return {
        title: welcomeMail.title,
        body: welcomeMail.body
          .replace(
            /##URL##/g,
            resetUrl +
              `?token=${encodeURIComponent(
                this.content.tokenforreset
              )}&email=${encodeURIComponent(this.content.email)}&welcome=true`
          ),
      };
    }
  #+END_SRC
- ~async setExtra(extraParams) {void}~ :: This function is called on
  user creation. It receives as parameter all the body parameters
  (except for ~email~) that where present on the call of ~POST
  /v/1/user~. It can set the values into ~this.content~. The content
  will be saved afterwards automatically. To validate the types of the
  values, you also can configure ~extraTypes~ (see [[Configuration]]).
- ~async getExtraAPITokenContent() {?object} ~ :: This function can be
  used to inject extra information into the APIToken. Useful for
  providing a JWT that contains all necessary information for the API
  and thus reducing the amount of database calls.

** Provided REST-API

*** Create a user: POST =/v1/user/=

- Body Parameters
  - ~email {email}~ :: Email
- Returns
  + 200, ~"ok"~
  + 413, ~"User exists"~

After successfully calling this API, an email will be send to ~email~,
containing a link for verifying the email. This link contains a token
that can be used for the reset password API and thus can be used to
set the password.

_Example:_
#+BEGIN_SRC restclient :exports both
:uname = testname3
:email = testname3@gmail.com
:pw = a123456

POST http://127.0.0.1:3000/v1/user/
Content-Type: application/x-www-form-urlencoded
name=:uname&email=:email&password=:pw
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 21,
  "token": "sTrw72s8DtMbdHzSdT11sivW/0vjFkKy1FFpJkdzr2c="
}
// POST http://127.0.0.1:3000/v1/user/
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 64
// ETag: W/"40-jhUPKq+D+iLyBAe1Xe3oODIv654"
// Date: Tue, 12 Feb 2019 16:00:34 GMT
// Connection: keep-alive
// Request duration: 0.272916s
#+END_SRC

*** TODO GET =/v1/user=

- Path Parameters
  - ~int {id}~ :: Id of the user to be returned
- Headers
  - =Authorization= with =Basic= base64(username:token)
- Returns
  + ~{ id: {id}, name: {string} }~
  + 400, ~"Authorization wrong"~
  + 401, ~"Unauthorized"~
  + 404

_Example:_
#+BEGIN_SRC restclient :exports both
:my-auth := (base64-encode-string "testname3@gmail.com:0mK3qRBqyuHGcrxghZRXGbynLlx6LDxr5+TT0FJOJv0=" t)

GET http://127.0.0.1:3000/v1/user/20
Content-Type: application/x-www-form-urlencoded
Authorization: Basic :my-auth
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 20,
  "name": "testname3"
}
// GET http://127.0.0.1:3000/v1/user/20
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 28
// ETag: W/"1c-7vM82X4RsHmDNUOUE2XcYT5mRCM"
// Date: Tue, 12 Feb 2019 15:57:00 GMT
// Connection: keep-alive
// Request duration: 0.007437s
#+END_SRC

*** Login: GET =/v1/user/token=

- Headers
  - =Authorization= with =Basic= base64(username:password)
- Returns
  + 200, 
    : {
    :   type: "object",
    :   values: {
    :     id: { type: "id" },
    :     loginToken: { type: "base64" },
    :     apiToken: { type: "string" },
    :   },
    : }
  + 400, ~"Authorization wrong"~
  + 401, ~"Unauthorized"~
  + 401, ~"User not found""~


_Example:_
#+BEGIN_SRC restclient :exports both
:my-auth := (base64-encode-string "testname3@gmail.com:a123456" t)

GET http://127.0.0.1:3000/v1/user/token
Content-Type: application/x-www-form-urlencoded
Authorization: Basic :my-auth
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
{
  "id": 20,
  "token": "0mK3qRBqyuHGcrxghZRXGbynLlx6LDxr5+TT0FJOJv0="
}
// GET http://127.0.0.1:3000/v1/user/1/token
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 64
// ETag: W/"40-zxDI4x20J1VZXlBxXXI+Yyu6458"
// Date: Tue, 12 Feb 2019 15:55:47 GMT
// Connection: keep-alive
// Request duration: 0.268833s
#+END_SRC
*** Refresh API Token: GET =/v1/user/apiToken=

- Headers
  - =Authorization= with =Bearer loginToken= 
- Returns
  + 200, 
    : {
    :   type: "string"
    : }
  + 400, ~"Authorization wrong"~
  + 401, ~"Unauthorized"~
  + 401, ~"User not found""~

*** TODO DELETE =/v1/user/:id=

- Path Parameters
  - ~int {id}~ :: Id of the user to be deleted
- Headers
  - =Authorization= with =Basic= base64(username:password)
- Returns
  + ~"ok"~
  + 400, ~"Authorization wrong"~
  + 401, ~"Unauthorized"~
  + 404, ~"User not found"~

_Example:_
#+BEGIN_SRC restclient :exports both
:my-auth := (base64-encode-string "testname1@gmail.com:a123456" t)

DELETE http://127.0.0.1:3000/v1/user/17
Content-Type: application/x-www-form-urlencoded
Authorization: Basic :my-auth
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
"ok"
// DELETE http://127.0.0.1:3000/v1/user/17
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 4
// ETag: W/"4-Ut1MdMgT2zeQF5xPI2zq2so0Z6g"
// Date: Tue, 12 Feb 2019 15:59:24 GMT
// Connection: keep-alive
// Request duration: 0.259496s
#+END_SRC

*** TODO PUT =/v1/user/:id=

- Path Parameters
  - ~int {id}~ :: Id of the user to be changed
- Body Parameters
  - ~name {string}~ :: Optional, new name of the user
  - ~email {email}~ :: Optional, new email of the user
  - ~newpassword {password}~ :: Optional, new password of the user
  - ~password {password}~ :: Optional, old password of the user,
       *required if not using a passwort-reset token*
- Headers
  - =Authorization= with =Basic= base64(username:token)
- Returns
  + ~"ok"~
  + 400, ~"nothing to update"~
  + 400, ~"Email exists already"~
  + 400, ~"Authorization wrong"~
  + 401, ~"Unauthorized"~

_Example:_
#+BEGIN_SRC restclient :exports both
:my-auth := (base64-encode-string "test@web.de:FcvsslFITxgPyszUy80NDee+WOTE7xdn1zASyDwdx90=" t)

PUT http://127.0.0.1:3001/v1/user/20
Content-Type: application/x-www-form-urlencoded
Authorization: Basic :my-auth
name=dude&password=myPw1
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
"ok"
// PUT http://127.0.0.1:3001/v1/user/20
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 4
// ETag: W/"4-Ut1MdMgT2zeQF5xPI2zq2so0Z6g"
// Date: Wed, 13 Feb 2019 15:36:32 GMT
// Connection: keep-alive
// Request duration: 0.259056s
#+END_SRC

*** TODO PUT =/v1/user/:email/password=

- Path Parameters
  - ~email {emial}~ :: Email of the user to be changed
- Returns
  + ~"ok"~

_Example:_
#+BEGIN_SRC restclient :exports both
POST http://127.0.0.1:3000/v1/user/abc@web.de/reset
Content-Type: application/x-www-form-urlencoded
#+END_SRC

#+RESULTS:
#+BEGIN_SRC js
"ok"
// POST http://127.0.0.1:3001/v1/user/abc@web.de/reset
// HTTP/1.1 200 OK
// X-Powered-By: Express
// Vary: Origin
// Access-Control-Allow-Credentials: true
// Content-Type: application/json; charset=utf-8
// Content-Length: 4
// ETag: W/"4-Ut1MdMgT2zeQF5xPI2zq2so0Z6g"
// Date: Wed, 13 Feb 2019 15:33:11 GMT
// Connection: keep-alive
// Request duration: 0.020691s
#+END_SRC


* Flows

** Signup

#+BEGIN_SRC plantuml :file signup.png :exports results
skinparam roundcorner 5
skinparam monochrome true
skinparam shadowing false
actor User

group Signup
User -> Loginservice : POST /v/1/user
activate Loginservice
Loginservice -> Mailserver : Send mail with token
activate Mailserver
User <-- Loginservice : "ok"
deactivate Loginservice
User <-- Mailserver : Mail with token
deactivate Mailserver

User -> Loginservice : PUT /v/1/user/:email [token]
activate Loginservice
User <-- Loginservice : { JWT, loginToken }
deactivate Loginservice
end
#+END_SRC

#+RESULTS:
[[file:signup.png]]
** Login and API-flow

#+BEGIN_SRC plantuml :exports results :file login.png
actor User
skinparam roundcorner 5
skinparam monochrome true
skinparam shadowing false

group Login
User -> Loginservice : GET /v1/user/token [PW]
activate Loginservice
User <-- Loginservice : { JWT, loginToken }
deactivate Loginservice
end

group API request
User -> API : api request [JWT]
activate API
API --> User : response
deactivate API
note right
The API does not need to contact
the Loginservice, as all required data
is in the JWT
end note
end

group Refresh token

... JWT expire time reached  ...

User -> API : api request [stale JWT]
Activate API
User <--x API : 401
deactivate API

User -> Loginservice : GET /v1/user/getAPIToken [loginToken]
activate Loginservice
User <-- Loginservice : JWT
deactivate Loginservice

User -> API : api request with [JWT]
activate API
API --> User : response
deactivate API
end

#+END_SRC

#+RESULTS:
[[file:login.png]]

** Password reset

#+BEGIN_SRC plantuml :file resetpw.png :exports results
actor User
skinparam roundcorner 5
skinparam monochrome true
skinparam shadowing false

User -> Loginservice : GET /v1/user/token [wrong PW]
activate Loginservice
User <--x Loginservice : 401
deactivate Loginservice

User -> Loginservice : POST /v/1/user/:email/reset
activate Loginservice
Loginservice -> Mailserver : Send mail with token
activate Mailserver
User <-- Loginservice : "ok"
deactivate Loginservice
User <-- Mailserver : Mail with token
deactivate Mailserver

User -> Loginservice : PUT /v/1/user/:email [token]
activate Loginservice
User <-- Loginservice : { JWT, loginToken }
deactivate Loginservice

#+END_SRC

#+RESULTS:
[[file:resetpw.png]]

